LifecycleDemo.js
import React, { Component } from 'react';
class LifecycleDemo extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
    console.log('Constructor called');
  }
  componentDidMount() {
    console.log('ComponentDidMount called');
  }
  componentDidUpdate(prevProps, prevState) {
    console.log('ComponentDidUpdate called');
    console.log('Previous State:', prevState);
    console.log('Current State:', this.state);
  }
  componentWillUnmount() {
    console.log('ComponentWillUnmount called');
  }

  updateCount = () => {
    this.setState((prevState) => ({
      count: prevState.count + 1,
    }));
  };

  render() {
    console.log('Render called');
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={this.updateCount}>Update Count</button>
      </div>
    );
  }
}

export default LifecycleDemo;
App.js
import React, { useState } from 'react';
import LifecycleDemo from './LifeCycleDemo';

function App() {
  const [showComponent, setShowComponent] = useState(true);

  return (
    <div>
      {showComponent && <LifecycleDemo />}
      <button onClick={() => setShowComponent(!showComponent)}>
        {showComponent ? 'Unmount Component' : 'Mount Component'}
      </button>
    </div>
  );
}

export default App;
